# -*- coding: utf-8 -*-
"""flotasapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CmhCX_8sX8vYllHTV5vCbnBssneuvxS9
"""

# flotasapp.py
# Aplicaci√≥n Streamlit para an√°lisis de datos de flotas basado en formato Mobil Serv

# ---------------------------------------------
# 1. IMPORTACI√ìN DE LIBRER√çAS NECESARIAS
# ---------------------------------------------
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# ---------------------------------------------
# 2. CONFIGURACI√ìN INICIAL DE LA APLICACI√ìN
# ---------------------------------------------
st.set_page_config(page_title="An√°lisis de Flotas - Mobil Serv", layout="wide")

# ---------------------------------------------
# 3. DICCIONARIO DE COLUMNAS ESPERADAS
# ---------------------------------------------
# Este diccionario define los c√≥digos de columna (letras del Excel) y su significado.
columnas_esperadas = {
    'CK': 'B (Boron)', 'CO': 'Ca (Calcium)', 'EI': 'Mg (Magnesium)', 'FA': 'P (Phosphorus)',
    'HN': 'Zn (Zinc)', 'EE': 'K (Potassium)', 'EQ': 'Na (Sodium)', 'GH': 'Si (Silicon)',
    'HH': 'Water (Vol%)', 'CG': 'Al (Aluminum)', 'CY': 'Cr (Chromium)', 'DA': 'Cu (Copper)',
    'DS': 'Fe (Iron)', 'EM': 'Mo (Molybdenum)', 'FS': 'Pb (Lead)', 'FW': 'PQ Index',
    'B': 'Report Status', 'C': 'Date Reported', 'E': 'Unit ID', 'I': 'Tested Lubricant',
    'L': 'Manufacturer', 'O': 'Alt Model', 'R': 'Account Name', 'W': 'Parent Account Name',
    'BB': 'Equipment Age', 'BD': 'Oil Age', 'EW': 'Oxidation (Ab/cm)', 'GR': 'TBN (mg KOH/g)',
    'GZ': 'Visc@100C (cSt)', 'GN': 'TAN (mg KOH/g)', 'DY': 'Fuel Dilut. (Vol%)',
    'EU': 'Nitration (Ab/cm)', 'FE': 'Particle Count  >4um', 'FG': 'Particle Count  >6um',
    'FI': 'Particle Count  >14um', 'HB': 'Visc@40C (cSt)', 'GL': 'Soot (Wt%)'
}

# Lista de columnas consideradas para desgaste
columnas_desgaste = ['CG', 'CY', 'DA', 'DS', 'EM', 'FS', 'FW']

# ---------------------------------------------
# 4. T√çTULO Y DESCRIPCI√ìN DE LA APLICACI√ìN
# ---------------------------------------------
st.title("üìä An√°lisis de Datos de Flotas de Equipos - Mobil Serv")
st.markdown("""
Esta aplicaci√≥n permite analizar datos hist√≥ricos de flotas espec√≠ficas de equipos.

‚úÖ **Importante:** el archivo Excel debe estar previamente filtrado (por ejemplo, solo motores de un mismo modelo) y en formato **Mobil Serv**, con columnas correctamente estructuradas.
""")

# ---------------------------------------------
# 5. CARGA DEL ARCHIVO EXCEL
# ---------------------------------------------
archivo = st.file_uploader("üìÅ Sube tu archivo Excel en formato Mobil Serv", type=["xlsx"])

# ---------------------------------------------
# 6. PROCESAMIENTO Y VALIDACI√ìN
# ---------------------------------------------
if archivo:
    try:
        df = pd.read_excel(archivo)
        columnas_archivo = set(df.columns.astype(str))
        columnas_requeridas = set(columnas_esperadas.keys())

        # Verificar si todas las columnas requeridas est√°n presentes
        if columnas_requeridas.issubset(columnas_archivo):
            st.success("‚úÖ Archivo v√°lido. Formato Mobil Serv reconocido.")
            st.subheader("Vista previa de los primeros registros")
            st.dataframe(df.head())

            # Reemplazar vac√≠os por 0 en columnas de desgaste y convertir a n√∫mero
            for col in columnas_desgaste:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col].fillna(0), errors='coerce')

            # Validar columnas con pocos datos
            columnas_invalidas = []
            for col in df.columns:
                if df[col].notna().sum() < 5:
                    columnas_invalidas.append((col, df[col].notna().sum()))

            # Informar al usuario sobre columnas no v√°lidas
            if columnas_invalidas:
                st.warning("‚ö†Ô∏è Las siguientes columnas no tienen suficientes datos y ser√°n ignoradas:")
                for col, count in columnas_invalidas:
                    nombre = columnas_esperadas.get(col, col)
                    st.write(f"‚Ä¢ {nombre} ({col}): {count} datos v√°lidos")

            # ---------------------------------------------
            # 7. GR√ÅFICO DE ESTADOS DE REPORTE
            # ---------------------------------------------
            st.subheader("üìà Estado general de las muestras")
            if 'B' in df.columns:
                conteo_estados = df['B'].value_counts()
                etiquetas = {'Normal': 'üü¢ Normal', 'Precaution': 'üü° Precauci√≥n', 'Abnormal': 'üî¥ Alerta'}
                estados = [etiquetas.get(k, k) for k in conteo_estados.index]

                fig, ax = plt.subplots()
                ax.bar(estados, conteo_estados.values, color=['green', 'orange', 'red'])
                ax.set_ylabel("Cantidad de muestras")
                ax.set_title("Distribuci√≥n de estados seg√∫n Report Status")
                st.pyplot(fig)
            else:
                st.error("No se encontr√≥ la columna 'B' correspondiente a Report Status.")

        else:
            columnas_faltantes = columnas_requeridas - columnas_archivo
            st.error("‚ùå Archivo inv√°lido. Faltan las siguientes columnas requeridas:")
            st.code("\n".join(sorted(columnas_faltantes)))
            st.info("Aseg√∫rate de que tu archivo est√© estructurado como formato Mobil Serv.")

    except Exception as e:
        st.error(f"‚ùå Error al procesar el archivo: {str(e)}")